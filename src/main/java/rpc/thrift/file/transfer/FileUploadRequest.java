/**
 * Autogenerated by Thrift Compiler (0.15.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package rpc.thrift.file.transfer;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-10-12")
public class FileUploadRequest implements org.apache.thrift.TBase<FileUploadRequest, FileUploadRequest._Fields>, java.io.Serializable, Cloneable, Comparable<FileUploadRequest> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileUploadRequest");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField SAVE_PARENT_FOLDER_FIELD_DESC = new org.apache.thrift.protocol.TField("saveParentFolder", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField RELATIVE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("relativePath", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.I32, (short) 4);
    private static final org.apache.thrift.protocol.TField IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("identifier", org.apache.thrift.protocol.TType.STRING, (short) 5);
    private static final org.apache.thrift.protocol.TField START_POS_FIELD_DESC = new org.apache.thrift.protocol.TField("startPos", org.apache.thrift.protocol.TType.I64, (short) 6);
    private static final org.apache.thrift.protocol.TField CHECK_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("checkSum", org.apache.thrift.protocol.TType.STRING, (short) 7);
    private static final org.apache.thrift.protocol.TField CONTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("contents", org.apache.thrift.protocol.TType.STRING, (short) 8);
    private static final org.apache.thrift.protocol.TField BYTES_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesLength", org.apache.thrift.protocol.TType.I32, (short) 9);
    private static final org.apache.thrift.protocol.TField ENCRYPTED_FIELD_DESC = new org.apache.thrift.protocol.TField("encrypted", org.apache.thrift.protocol.TType.BOOL, (short) 10);
    private static final org.apache.thrift.protocol.TField ENCRYPTED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedType", org.apache.thrift.protocol.TType.I32, (short) 11);
    private static final org.apache.thrift.protocol.TField TOTAL_FILE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("totalFileLength", org.apache.thrift.protocol.TType.I64, (short) 12);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FileUploadRequestStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FileUploadRequestTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable
    java.lang.String fileName; // required
    public @org.apache.thrift.annotation.Nullable
    java.lang.String saveParentFolder; // optional
    public @org.apache.thrift.annotation.Nullable
    java.lang.String relativePath; // optional
    /**
     * @see FileTypeEnum
     */
    public @org.apache.thrift.annotation.Nullable
    FileTypeEnum fileType; // required
    public @org.apache.thrift.annotation.Nullable
    java.lang.String identifier; // required
    public long startPos; // optional
    public @org.apache.thrift.annotation.Nullable
    java.lang.String checkSum; // required
    public @org.apache.thrift.annotation.Nullable
    java.nio.ByteBuffer contents; // optional
    public int bytesLength; // optional
    public boolean encrypted; // optional
    /**
     * @see EncryptTypeEnum
     */
    public @org.apache.thrift.annotation.Nullable
    EncryptTypeEnum encryptedType; // optional
    public long totalFileLength; // optional

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        FILE_NAME((short) 1, "fileName"),
        SAVE_PARENT_FOLDER((short) 2, "saveParentFolder"),
        RELATIVE_PATH((short) 3, "relativePath"),
        /**
         * @see FileTypeEnum
         */
        FILE_TYPE((short) 4, "fileType"),
        IDENTIFIER((short) 5, "identifier"),
        START_POS((short) 6, "startPos"),
        CHECK_SUM((short) 7, "checkSum"),
        CONTENTS((short) 8, "contents"),
        BYTES_LENGTH((short) 9, "bytesLength"),
        ENCRYPTED((short) 10, "encrypted"),
        /**
         * @see EncryptTypeEnum
         */
        ENCRYPTED_TYPE((short) 11, "encryptedType"),
        TOTAL_FILE_LENGTH((short) 12, "totalFileLength");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // FILE_NAME
                    return FILE_NAME;
                case 2: // SAVE_PARENT_FOLDER
                    return SAVE_PARENT_FOLDER;
                case 3: // RELATIVE_PATH
                    return RELATIVE_PATH;
                case 4: // FILE_TYPE
                    return FILE_TYPE;
                case 5: // IDENTIFIER
                    return IDENTIFIER;
                case 6: // START_POS
                    return START_POS;
                case 7: // CHECK_SUM
                    return CHECK_SUM;
                case 8: // CONTENTS
                    return CONTENTS;
                case 9: // BYTES_LENGTH
                    return BYTES_LENGTH;
                case 10: // ENCRYPTED
                    return ENCRYPTED;
                case 11: // ENCRYPTED_TYPE
                    return ENCRYPTED_TYPE;
                case 12: // TOTAL_FILE_LENGTH
                    return TOTAL_FILE_LENGTH;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __STARTPOS_ISSET_ID = 0;
    private static final int __BYTESLENGTH_ISSET_ID = 1;
    private static final int __ENCRYPTED_ISSET_ID = 2;
    private static final int __TOTALFILELENGTH_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.SAVE_PARENT_FOLDER, _Fields.RELATIVE_PATH, _Fields.START_POS, _Fields.CONTENTS, _Fields.BYTES_LENGTH, _Fields.ENCRYPTED, _Fields.ENCRYPTED_TYPE, _Fields.TOTAL_FILE_LENGTH};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SAVE_PARENT_FOLDER, new org.apache.thrift.meta_data.FieldMetaData("saveParentFolder", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.RELATIVE_PATH, new org.apache.thrift.meta_data.FieldMetaData("relativePath", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FileTypeEnum.class)));
        tmpMap.put(_Fields.IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("identifier", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.START_POS, new org.apache.thrift.meta_data.FieldMetaData("startPos", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.CHECK_SUM, new org.apache.thrift.meta_data.FieldMetaData("checkSum", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CONTENTS, new org.apache.thrift.meta_data.FieldMetaData("contents", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
        tmpMap.put(_Fields.BYTES_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("bytesLength", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.ENCRYPTED, new org.apache.thrift.meta_data.FieldMetaData("encrypted", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.ENCRYPTED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("encryptedType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EncryptTypeEnum.class)));
        tmpMap.put(_Fields.TOTAL_FILE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("totalFileLength", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileUploadRequest.class, metaDataMap);
    }

    public FileUploadRequest() {
        this.startPos = 0L;

        this.encrypted = false;

    }

    public FileUploadRequest(
            java.lang.String fileName,
            FileTypeEnum fileType,
            java.lang.String identifier,
            java.lang.String checkSum) {
        this();
        this.fileName = fileName;
        this.fileType = fileType;
        this.identifier = identifier;
        this.checkSum = checkSum;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FileUploadRequest(FileUploadRequest other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetFileName()) {
            this.fileName = other.fileName;
        }
        if (other.isSetSaveParentFolder()) {
            this.saveParentFolder = other.saveParentFolder;
        }
        if (other.isSetRelativePath()) {
            this.relativePath = other.relativePath;
        }
        if (other.isSetFileType()) {
            this.fileType = other.fileType;
        }
        if (other.isSetIdentifier()) {
            this.identifier = other.identifier;
        }
        this.startPos = other.startPos;
        if (other.isSetCheckSum()) {
            this.checkSum = other.checkSum;
        }
        if (other.isSetContents()) {
            this.contents = org.apache.thrift.TBaseHelper.copyBinary(other.contents);
        }
        this.bytesLength = other.bytesLength;
        this.encrypted = other.encrypted;
        if (other.isSetEncryptedType()) {
            this.encryptedType = other.encryptedType;
        }
        this.totalFileLength = other.totalFileLength;
    }

    public FileUploadRequest deepCopy() {
        return new FileUploadRequest(this);
    }

    @Override
    public void clear() {
        this.fileName = null;
        this.saveParentFolder = null;
        this.relativePath = null;
        this.fileType = null;
        this.identifier = null;
        this.startPos = 0L;

        this.checkSum = null;
        this.contents = null;
        setBytesLengthIsSet(false);
        this.bytesLength = 0;
        this.encrypted = false;

        this.encryptedType = null;
        setTotalFileLengthIsSet(false);
        this.totalFileLength = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFileName() {
        return this.fileName;
    }

    public FileUploadRequest setFileName(@org.apache.thrift.annotation.Nullable java.lang.String fileName) {
        this.fileName = fileName;
        return this;
    }

    public void unsetFileName() {
        this.fileName = null;
    }

    /**
     * Returns true if field fileName is set (has been assigned a value) and false otherwise
     */
    public boolean isSetFileName() {
        return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
        if (!value) {
            this.fileName = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSaveParentFolder() {
        return this.saveParentFolder;
    }

    public FileUploadRequest setSaveParentFolder(@org.apache.thrift.annotation.Nullable java.lang.String saveParentFolder) {
        this.saveParentFolder = saveParentFolder;
        return this;
    }

    public void unsetSaveParentFolder() {
        this.saveParentFolder = null;
    }

    /**
     * Returns true if field saveParentFolder is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSaveParentFolder() {
        return this.saveParentFolder != null;
    }

    public void setSaveParentFolderIsSet(boolean value) {
        if (!value) {
            this.saveParentFolder = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRelativePath() {
        return this.relativePath;
    }

    public FileUploadRequest setRelativePath(@org.apache.thrift.annotation.Nullable java.lang.String relativePath) {
        this.relativePath = relativePath;
        return this;
    }

    public void unsetRelativePath() {
        this.relativePath = null;
    }

    /**
     * Returns true if field relativePath is set (has been assigned a value) and false otherwise
     */
    public boolean isSetRelativePath() {
        return this.relativePath != null;
    }

    public void setRelativePathIsSet(boolean value) {
        if (!value) {
            this.relativePath = null;
        }
    }

    /**
     * @see FileTypeEnum
     */
    @org.apache.thrift.annotation.Nullable
    public FileTypeEnum getFileType() {
        return this.fileType;
    }

    /**
     * @see FileTypeEnum
     */
    public FileUploadRequest setFileType(@org.apache.thrift.annotation.Nullable FileTypeEnum fileType) {
        this.fileType = fileType;
        return this;
    }

    public void unsetFileType() {
        this.fileType = null;
    }

    /**
     * Returns true if field fileType is set (has been assigned a value) and false otherwise
     */
    public boolean isSetFileType() {
        return this.fileType != null;
    }

    public void setFileTypeIsSet(boolean value) {
        if (!value) {
            this.fileType = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getIdentifier() {
        return this.identifier;
    }

    public FileUploadRequest setIdentifier(@org.apache.thrift.annotation.Nullable java.lang.String identifier) {
        this.identifier = identifier;
        return this;
    }

    public void unsetIdentifier() {
        this.identifier = null;
    }

    /**
     * Returns true if field identifier is set (has been assigned a value) and false otherwise
     */
    public boolean isSetIdentifier() {
        return this.identifier != null;
    }

    public void setIdentifierIsSet(boolean value) {
        if (!value) {
            this.identifier = null;
        }
    }

    public long getStartPos() {
        return this.startPos;
    }

    public FileUploadRequest setStartPos(long startPos) {
        this.startPos = startPos;
        setStartPosIsSet(true);
        return this;
    }

    public void unsetStartPos() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTPOS_ISSET_ID);
    }

    /**
     * Returns true if field startPos is set (has been assigned a value) and false otherwise
     */
    public boolean isSetStartPos() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTPOS_ISSET_ID);
    }

    public void setStartPosIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTPOS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCheckSum() {
        return this.checkSum;
    }

    public FileUploadRequest setCheckSum(@org.apache.thrift.annotation.Nullable java.lang.String checkSum) {
        this.checkSum = checkSum;
        return this;
    }

    public void unsetCheckSum() {
        this.checkSum = null;
    }

    /**
     * Returns true if field checkSum is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCheckSum() {
        return this.checkSum != null;
    }

    public void setCheckSumIsSet(boolean value) {
        if (!value) {
            this.checkSum = null;
        }
    }

    public byte[] getContents() {
        setContents(org.apache.thrift.TBaseHelper.rightSize(contents));
        return contents == null ? null : contents.array();
    }

    public java.nio.ByteBuffer bufferForContents() {
        return org.apache.thrift.TBaseHelper.copyBinary(contents);
    }

    public FileUploadRequest setContents(byte[] contents) {
        this.contents = contents == null ? (java.nio.ByteBuffer) null : java.nio.ByteBuffer.wrap(contents.clone());
        return this;
    }

    public FileUploadRequest setContents(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer contents) {
        this.contents = org.apache.thrift.TBaseHelper.copyBinary(contents);
        return this;
    }

    public void unsetContents() {
        this.contents = null;
    }

    /**
     * Returns true if field contents is set (has been assigned a value) and false otherwise
     */
    public boolean isSetContents() {
        return this.contents != null;
    }

    public void setContentsIsSet(boolean value) {
        if (!value) {
            this.contents = null;
        }
    }

    public int getBytesLength() {
        return this.bytesLength;
    }

    public FileUploadRequest setBytesLength(int bytesLength) {
        this.bytesLength = bytesLength;
        setBytesLengthIsSet(true);
        return this;
    }

    public void unsetBytesLength() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTESLENGTH_ISSET_ID);
    }

    /**
     * Returns true if field bytesLength is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBytesLength() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTESLENGTH_ISSET_ID);
    }

    public void setBytesLengthIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTESLENGTH_ISSET_ID, value);
    }

    public boolean isEncrypted() {
        return this.encrypted;
    }

    public FileUploadRequest setEncrypted(boolean encrypted) {
        this.encrypted = encrypted;
        setEncryptedIsSet(true);
        return this;
    }

    public void unsetEncrypted() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENCRYPTED_ISSET_ID);
    }

    /**
     * Returns true if field encrypted is set (has been assigned a value) and false otherwise
     */
    public boolean isSetEncrypted() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENCRYPTED_ISSET_ID);
    }

    public void setEncryptedIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENCRYPTED_ISSET_ID, value);
    }

    /**
     * @see EncryptTypeEnum
     */
    @org.apache.thrift.annotation.Nullable
    public EncryptTypeEnum getEncryptedType() {
        return this.encryptedType;
    }

    /**
     * @see EncryptTypeEnum
     */
    public FileUploadRequest setEncryptedType(@org.apache.thrift.annotation.Nullable EncryptTypeEnum encryptedType) {
        this.encryptedType = encryptedType;
        return this;
    }

    public void unsetEncryptedType() {
        this.encryptedType = null;
    }

    /**
     * Returns true if field encryptedType is set (has been assigned a value) and false otherwise
     */
    public boolean isSetEncryptedType() {
        return this.encryptedType != null;
    }

    public void setEncryptedTypeIsSet(boolean value) {
        if (!value) {
            this.encryptedType = null;
        }
    }

    public long getTotalFileLength() {
        return this.totalFileLength;
    }

    public FileUploadRequest setTotalFileLength(long totalFileLength) {
        this.totalFileLength = totalFileLength;
        setTotalFileLengthIsSet(true);
        return this;
    }

    public void unsetTotalFileLength() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALFILELENGTH_ISSET_ID);
    }

    /**
     * Returns true if field totalFileLength is set (has been assigned a value) and false otherwise
     */
    public boolean isSetTotalFileLength() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALFILELENGTH_ISSET_ID);
    }

    public void setTotalFileLengthIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALFILELENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case FILE_NAME:
                if (value == null) {
                    unsetFileName();
                } else {
                    setFileName((java.lang.String) value);
                }
                break;

            case SAVE_PARENT_FOLDER:
                if (value == null) {
                    unsetSaveParentFolder();
                } else {
                    setSaveParentFolder((java.lang.String) value);
                }
                break;

            case RELATIVE_PATH:
                if (value == null) {
                    unsetRelativePath();
                } else {
                    setRelativePath((java.lang.String) value);
                }
                break;

            case FILE_TYPE:
                if (value == null) {
                    unsetFileType();
                } else {
                    setFileType((FileTypeEnum) value);
                }
                break;

            case IDENTIFIER:
                if (value == null) {
                    unsetIdentifier();
                } else {
                    setIdentifier((java.lang.String) value);
                }
                break;

            case START_POS:
                if (value == null) {
                    unsetStartPos();
                } else {
                    setStartPos((java.lang.Long) value);
                }
                break;

            case CHECK_SUM:
                if (value == null) {
                    unsetCheckSum();
                } else {
                    setCheckSum((java.lang.String) value);
                }
                break;

            case CONTENTS:
                if (value == null) {
                    unsetContents();
                } else {
                    if (value instanceof byte[]) {
                        setContents((byte[]) value);
                    } else {
                        setContents((java.nio.ByteBuffer) value);
                    }
                }
                break;

            case BYTES_LENGTH:
                if (value == null) {
                    unsetBytesLength();
                } else {
                    setBytesLength((java.lang.Integer) value);
                }
                break;

            case ENCRYPTED:
                if (value == null) {
                    unsetEncrypted();
                } else {
                    setEncrypted((java.lang.Boolean) value);
                }
                break;

            case ENCRYPTED_TYPE:
                if (value == null) {
                    unsetEncryptedType();
                } else {
                    setEncryptedType((EncryptTypeEnum) value);
                }
                break;

            case TOTAL_FILE_LENGTH:
                if (value == null) {
                    unsetTotalFileLength();
                } else {
                    setTotalFileLength((java.lang.Long) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case FILE_NAME:
                return getFileName();

            case SAVE_PARENT_FOLDER:
                return getSaveParentFolder();

            case RELATIVE_PATH:
                return getRelativePath();

            case FILE_TYPE:
                return getFileType();

            case IDENTIFIER:
                return getIdentifier();

            case START_POS:
                return getStartPos();

            case CHECK_SUM:
                return getCheckSum();

            case CONTENTS:
                return getContents();

            case BYTES_LENGTH:
                return getBytesLength();

            case ENCRYPTED:
                return isEncrypted();

            case ENCRYPTED_TYPE:
                return getEncryptedType();

            case TOTAL_FILE_LENGTH:
                return getTotalFileLength();

        }
        throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case FILE_NAME:
                return isSetFileName();
            case SAVE_PARENT_FOLDER:
                return isSetSaveParentFolder();
            case RELATIVE_PATH:
                return isSetRelativePath();
            case FILE_TYPE:
                return isSetFileType();
            case IDENTIFIER:
                return isSetIdentifier();
            case START_POS:
                return isSetStartPos();
            case CHECK_SUM:
                return isSetCheckSum();
            case CONTENTS:
                return isSetContents();
            case BYTES_LENGTH:
                return isSetBytesLength();
            case ENCRYPTED:
                return isSetEncrypted();
            case ENCRYPTED_TYPE:
                return isSetEncryptedType();
            case TOTAL_FILE_LENGTH:
                return isSetTotalFileLength();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof FileUploadRequest)
            return this.equals((FileUploadRequest) that);
        return false;
    }

    public boolean equals(FileUploadRequest that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_fileName = true && this.isSetFileName();
        boolean that_present_fileName = true && that.isSetFileName();
        if (this_present_fileName || that_present_fileName) {
            if (!(this_present_fileName && that_present_fileName))
                return false;
            if (!this.fileName.equals(that.fileName))
                return false;
        }

        boolean this_present_saveParentFolder = true && this.isSetSaveParentFolder();
        boolean that_present_saveParentFolder = true && that.isSetSaveParentFolder();
        if (this_present_saveParentFolder || that_present_saveParentFolder) {
            if (!(this_present_saveParentFolder && that_present_saveParentFolder))
                return false;
            if (!this.saveParentFolder.equals(that.saveParentFolder))
                return false;
        }

        boolean this_present_relativePath = true && this.isSetRelativePath();
        boolean that_present_relativePath = true && that.isSetRelativePath();
        if (this_present_relativePath || that_present_relativePath) {
            if (!(this_present_relativePath && that_present_relativePath))
                return false;
            if (!this.relativePath.equals(that.relativePath))
                return false;
        }

        boolean this_present_fileType = true && this.isSetFileType();
        boolean that_present_fileType = true && that.isSetFileType();
        if (this_present_fileType || that_present_fileType) {
            if (!(this_present_fileType && that_present_fileType))
                return false;
            if (!this.fileType.equals(that.fileType))
                return false;
        }

        boolean this_present_identifier = true && this.isSetIdentifier();
        boolean that_present_identifier = true && that.isSetIdentifier();
        if (this_present_identifier || that_present_identifier) {
            if (!(this_present_identifier && that_present_identifier))
                return false;
            if (!this.identifier.equals(that.identifier))
                return false;
        }

        boolean this_present_startPos = true && this.isSetStartPos();
        boolean that_present_startPos = true && that.isSetStartPos();
        if (this_present_startPos || that_present_startPos) {
            if (!(this_present_startPos && that_present_startPos))
                return false;
            if (this.startPos != that.startPos)
                return false;
        }

        boolean this_present_checkSum = true && this.isSetCheckSum();
        boolean that_present_checkSum = true && that.isSetCheckSum();
        if (this_present_checkSum || that_present_checkSum) {
            if (!(this_present_checkSum && that_present_checkSum))
                return false;
            if (!this.checkSum.equals(that.checkSum))
                return false;
        }

        boolean this_present_contents = true && this.isSetContents();
        boolean that_present_contents = true && that.isSetContents();
        if (this_present_contents || that_present_contents) {
            if (!(this_present_contents && that_present_contents))
                return false;
            if (!this.contents.equals(that.contents))
                return false;
        }

        boolean this_present_bytesLength = true && this.isSetBytesLength();
        boolean that_present_bytesLength = true && that.isSetBytesLength();
        if (this_present_bytesLength || that_present_bytesLength) {
            if (!(this_present_bytesLength && that_present_bytesLength))
                return false;
            if (this.bytesLength != that.bytesLength)
                return false;
        }

        boolean this_present_encrypted = true && this.isSetEncrypted();
        boolean that_present_encrypted = true && that.isSetEncrypted();
        if (this_present_encrypted || that_present_encrypted) {
            if (!(this_present_encrypted && that_present_encrypted))
                return false;
            if (this.encrypted != that.encrypted)
                return false;
        }

        boolean this_present_encryptedType = true && this.isSetEncryptedType();
        boolean that_present_encryptedType = true && that.isSetEncryptedType();
        if (this_present_encryptedType || that_present_encryptedType) {
            if (!(this_present_encryptedType && that_present_encryptedType))
                return false;
            if (!this.encryptedType.equals(that.encryptedType))
                return false;
        }

        boolean this_present_totalFileLength = true && this.isSetTotalFileLength();
        boolean that_present_totalFileLength = true && that.isSetTotalFileLength();
        if (this_present_totalFileLength || that_present_totalFileLength) {
            if (!(this_present_totalFileLength && that_present_totalFileLength))
                return false;
            if (this.totalFileLength != that.totalFileLength)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
        if (isSetFileName())
            hashCode = hashCode * 8191 + fileName.hashCode();

        hashCode = hashCode * 8191 + ((isSetSaveParentFolder()) ? 131071 : 524287);
        if (isSetSaveParentFolder())
            hashCode = hashCode * 8191 + saveParentFolder.hashCode();

        hashCode = hashCode * 8191 + ((isSetRelativePath()) ? 131071 : 524287);
        if (isSetRelativePath())
            hashCode = hashCode * 8191 + relativePath.hashCode();

        hashCode = hashCode * 8191 + ((isSetFileType()) ? 131071 : 524287);
        if (isSetFileType())
            hashCode = hashCode * 8191 + fileType.getValue();

        hashCode = hashCode * 8191 + ((isSetIdentifier()) ? 131071 : 524287);
        if (isSetIdentifier())
            hashCode = hashCode * 8191 + identifier.hashCode();

        hashCode = hashCode * 8191 + ((isSetStartPos()) ? 131071 : 524287);
        if (isSetStartPos())
            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startPos);

        hashCode = hashCode * 8191 + ((isSetCheckSum()) ? 131071 : 524287);
        if (isSetCheckSum())
            hashCode = hashCode * 8191 + checkSum.hashCode();

        hashCode = hashCode * 8191 + ((isSetContents()) ? 131071 : 524287);
        if (isSetContents())
            hashCode = hashCode * 8191 + contents.hashCode();

        hashCode = hashCode * 8191 + ((isSetBytesLength()) ? 131071 : 524287);
        if (isSetBytesLength())
            hashCode = hashCode * 8191 + bytesLength;

        hashCode = hashCode * 8191 + ((isSetEncrypted()) ? 131071 : 524287);
        if (isSetEncrypted())
            hashCode = hashCode * 8191 + ((encrypted) ? 131071 : 524287);

        hashCode = hashCode * 8191 + ((isSetEncryptedType()) ? 131071 : 524287);
        if (isSetEncryptedType())
            hashCode = hashCode * 8191 + encryptedType.getValue();

        hashCode = hashCode * 8191 + ((isSetTotalFileLength()) ? 131071 : 524287);
        if (isSetTotalFileLength())
            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalFileLength);

        return hashCode;
    }

    @Override
    public int compareTo(FileUploadRequest other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetFileName(), other.isSetFileName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFileName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetSaveParentFolder(), other.isSetSaveParentFolder());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSaveParentFolder()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveParentFolder, other.saveParentFolder);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetRelativePath(), other.isSetRelativePath());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRelativePath()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relativePath, other.relativePath);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetFileType(), other.isSetFileType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFileType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetIdentifier(), other.isSetIdentifier());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIdentifier()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifier, other.identifier);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetStartPos(), other.isSetStartPos());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStartPos()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startPos, other.startPos);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetCheckSum(), other.isSetCheckSum());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCheckSum()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkSum, other.checkSum);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetContents(), other.isSetContents());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetContents()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contents, other.contents);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetBytesLength(), other.isSetBytesLength());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBytesLength()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytesLength, other.bytesLength);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetEncrypted(), other.isSetEncrypted());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEncrypted()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encrypted, other.encrypted);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetEncryptedType(), other.isSetEncryptedType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEncryptedType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedType, other.encryptedType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetTotalFileLength(), other.isSetTotalFileLength());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTotalFileLength()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalFileLength, other.totalFileLength);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("FileUploadRequest(");
        boolean first = true;

        sb.append("fileName:");
        if (this.fileName == null) {
            sb.append("null");
        } else {
            sb.append(this.fileName);
        }
        first = false;
        if (isSetSaveParentFolder()) {
            if (!first) sb.append(", ");
            sb.append("saveParentFolder:");
            if (this.saveParentFolder == null) {
                sb.append("null");
            } else {
                sb.append(this.saveParentFolder);
            }
            first = false;
        }
        if (isSetRelativePath()) {
            if (!first) sb.append(", ");
            sb.append("relativePath:");
            if (this.relativePath == null) {
                sb.append("null");
            } else {
                sb.append(this.relativePath);
            }
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("fileType:");
        if (this.fileType == null) {
            sb.append("null");
        } else {
            sb.append(this.fileType);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("identifier:");
        if (this.identifier == null) {
            sb.append("null");
        } else {
            sb.append(this.identifier);
        }
        first = false;
        if (isSetStartPos()) {
            if (!first) sb.append(", ");
            sb.append("startPos:");
            sb.append(this.startPos);
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("checkSum:");
        if (this.checkSum == null) {
            sb.append("null");
        } else {
            sb.append(this.checkSum);
        }
        first = false;
        if (isSetBytesLength()) {
            if (!first) sb.append(", ");
            sb.append("bytesLength:");
            sb.append(this.bytesLength);
            first = false;
        }
        if (isSetEncrypted()) {
            if (!first) sb.append(", ");
            sb.append("encrypted:");
            sb.append(this.encrypted);
            first = false;
        }
        if (isSetEncryptedType()) {
            if (!first) sb.append(", ");
            sb.append("encryptedType:");
            if (this.encryptedType == null) {
                sb.append("null");
            } else {
                sb.append(this.encryptedType);
            }
            first = false;
        }
        if (isSetTotalFileLength()) {
            if (!first) sb.append(", ");
            sb.append("totalFileLength:");
            sb.append(this.totalFileLength);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (fileName == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileName' was not present! Struct: " + toString());
        }
        if (fileType == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileType' was not present! Struct: " + toString());
        }
        if (identifier == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'identifier' was not present! Struct: " + toString());
        }
        if (checkSum == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'checkSum' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class FileUploadRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public FileUploadRequestStandardScheme getScheme() {
            return new FileUploadRequestStandardScheme();
        }
    }

    private static class FileUploadRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<FileUploadRequest> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, FileUploadRequest struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // FILE_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.fileName = iprot.readString();
                            struct.setFileNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // SAVE_PARENT_FOLDER
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.saveParentFolder = iprot.readString();
                            struct.setSaveParentFolderIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // RELATIVE_PATH
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.relativePath = iprot.readString();
                            struct.setRelativePathIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // FILE_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.fileType = rpc.thrift.file.transfer.FileTypeEnum.findByValue(iprot.readI32());
                            struct.setFileTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // IDENTIFIER
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.identifier = iprot.readString();
                            struct.setIdentifierIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // START_POS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.startPos = iprot.readI64();
                            struct.setStartPosIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // CHECK_SUM
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.checkSum = iprot.readString();
                            struct.setCheckSumIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // CONTENTS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.contents = iprot.readBinary();
                            struct.setContentsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // BYTES_LENGTH
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.bytesLength = iprot.readI32();
                            struct.setBytesLengthIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // ENCRYPTED
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.encrypted = iprot.readBool();
                            struct.setEncryptedIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // ENCRYPTED_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.encryptedType = rpc.thrift.file.transfer.EncryptTypeEnum.findByValue(iprot.readI32());
                            struct.setEncryptedTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // TOTAL_FILE_LENGTH
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.totalFileLength = iprot.readI64();
                            struct.setTotalFileLengthIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, FileUploadRequest struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.fileName != null) {
                oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
                oprot.writeString(struct.fileName);
                oprot.writeFieldEnd();
            }
            if (struct.saveParentFolder != null) {
                if (struct.isSetSaveParentFolder()) {
                    oprot.writeFieldBegin(SAVE_PARENT_FOLDER_FIELD_DESC);
                    oprot.writeString(struct.saveParentFolder);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.relativePath != null) {
                if (struct.isSetRelativePath()) {
                    oprot.writeFieldBegin(RELATIVE_PATH_FIELD_DESC);
                    oprot.writeString(struct.relativePath);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.fileType != null) {
                oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
                oprot.writeI32(struct.fileType.getValue());
                oprot.writeFieldEnd();
            }
            if (struct.identifier != null) {
                oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
                oprot.writeString(struct.identifier);
                oprot.writeFieldEnd();
            }
            if (struct.isSetStartPos()) {
                oprot.writeFieldBegin(START_POS_FIELD_DESC);
                oprot.writeI64(struct.startPos);
                oprot.writeFieldEnd();
            }
            if (struct.checkSum != null) {
                oprot.writeFieldBegin(CHECK_SUM_FIELD_DESC);
                oprot.writeString(struct.checkSum);
                oprot.writeFieldEnd();
            }
            if (struct.contents != null) {
                if (struct.isSetContents()) {
                    oprot.writeFieldBegin(CONTENTS_FIELD_DESC);
                    oprot.writeBinary(struct.contents);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetBytesLength()) {
                oprot.writeFieldBegin(BYTES_LENGTH_FIELD_DESC);
                oprot.writeI32(struct.bytesLength);
                oprot.writeFieldEnd();
            }
            if (struct.isSetEncrypted()) {
                oprot.writeFieldBegin(ENCRYPTED_FIELD_DESC);
                oprot.writeBool(struct.encrypted);
                oprot.writeFieldEnd();
            }
            if (struct.encryptedType != null) {
                if (struct.isSetEncryptedType()) {
                    oprot.writeFieldBegin(ENCRYPTED_TYPE_FIELD_DESC);
                    oprot.writeI32(struct.encryptedType.getValue());
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetTotalFileLength()) {
                oprot.writeFieldBegin(TOTAL_FILE_LENGTH_FIELD_DESC);
                oprot.writeI64(struct.totalFileLength);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class FileUploadRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public FileUploadRequestTupleScheme getScheme() {
            return new FileUploadRequestTupleScheme();
        }
    }

    private static class FileUploadRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<FileUploadRequest> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, FileUploadRequest struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            oprot.writeString(struct.fileName);
            oprot.writeI32(struct.fileType.getValue());
            oprot.writeString(struct.identifier);
            oprot.writeString(struct.checkSum);
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetSaveParentFolder()) {
                optionals.set(0);
            }
            if (struct.isSetRelativePath()) {
                optionals.set(1);
            }
            if (struct.isSetStartPos()) {
                optionals.set(2);
            }
            if (struct.isSetContents()) {
                optionals.set(3);
            }
            if (struct.isSetBytesLength()) {
                optionals.set(4);
            }
            if (struct.isSetEncrypted()) {
                optionals.set(5);
            }
            if (struct.isSetEncryptedType()) {
                optionals.set(6);
            }
            if (struct.isSetTotalFileLength()) {
                optionals.set(7);
            }
            oprot.writeBitSet(optionals, 8);
            if (struct.isSetSaveParentFolder()) {
                oprot.writeString(struct.saveParentFolder);
            }
            if (struct.isSetRelativePath()) {
                oprot.writeString(struct.relativePath);
            }
            if (struct.isSetStartPos()) {
                oprot.writeI64(struct.startPos);
            }
            if (struct.isSetContents()) {
                oprot.writeBinary(struct.contents);
            }
            if (struct.isSetBytesLength()) {
                oprot.writeI32(struct.bytesLength);
            }
            if (struct.isSetEncrypted()) {
                oprot.writeBool(struct.encrypted);
            }
            if (struct.isSetEncryptedType()) {
                oprot.writeI32(struct.encryptedType.getValue());
            }
            if (struct.isSetTotalFileLength()) {
                oprot.writeI64(struct.totalFileLength);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, FileUploadRequest struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.fileName = iprot.readString();
            struct.setFileNameIsSet(true);
            struct.fileType = rpc.thrift.file.transfer.FileTypeEnum.findByValue(iprot.readI32());
            struct.setFileTypeIsSet(true);
            struct.identifier = iprot.readString();
            struct.setIdentifierIsSet(true);
            struct.checkSum = iprot.readString();
            struct.setCheckSumIsSet(true);
            java.util.BitSet incoming = iprot.readBitSet(8);
            if (incoming.get(0)) {
                struct.saveParentFolder = iprot.readString();
                struct.setSaveParentFolderIsSet(true);
            }
            if (incoming.get(1)) {
                struct.relativePath = iprot.readString();
                struct.setRelativePathIsSet(true);
            }
            if (incoming.get(2)) {
                struct.startPos = iprot.readI64();
                struct.setStartPosIsSet(true);
            }
            if (incoming.get(3)) {
                struct.contents = iprot.readBinary();
                struct.setContentsIsSet(true);
            }
            if (incoming.get(4)) {
                struct.bytesLength = iprot.readI32();
                struct.setBytesLengthIsSet(true);
            }
            if (incoming.get(5)) {
                struct.encrypted = iprot.readBool();
                struct.setEncryptedIsSet(true);
            }
            if (incoming.get(6)) {
                struct.encryptedType = rpc.thrift.file.transfer.EncryptTypeEnum.findByValue(iprot.readI32());
                struct.setEncryptedTypeIsSet(true);
            }
            if (incoming.get(7)) {
                struct.totalFileLength = iprot.readI64();
                struct.setTotalFileLengthIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

