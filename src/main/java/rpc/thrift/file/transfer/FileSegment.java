/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rpc.thrift.file.transfer;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-05-11")
public class FileSegment implements org.apache.thrift.TBase<FileSegment, FileSegment._Fields>, java.io.Serializable, Cloneable, Comparable<FileSegment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileSegment");

  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RELATIVE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("relativePath", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("identifier", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField POS_FIELD_DESC = new org.apache.thrift.protocol.TField("pos", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CHECK_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("checkSum", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CONTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("contents", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BYTES_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesLength", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FileSegmentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FileSegmentTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String fileName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String relativePath; // optional
  /**
   * 
   * @see FileTypeEnum
   */
  public @org.apache.thrift.annotation.Nullable FileTypeEnum fileType; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String identifier; // required
  public long pos; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String checkSum; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer contents; // required
  public int bytesLength; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_NAME((short)1, "fileName"),
    RELATIVE_PATH((short)3, "relativePath"),
    /**
     * 
     * @see FileTypeEnum
     */
    FILE_TYPE((short)4, "fileType"),
    IDENTIFIER((short)5, "identifier"),
    POS((short)6, "pos"),
    CHECK_SUM((short)7, "checkSum"),
    CONTENTS((short)8, "contents"),
    BYTES_LENGTH((short)9, "bytesLength");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_NAME
          return FILE_NAME;
        case 3: // RELATIVE_PATH
          return RELATIVE_PATH;
        case 4: // FILE_TYPE
          return FILE_TYPE;
        case 5: // IDENTIFIER
          return IDENTIFIER;
        case 6: // POS
          return POS;
        case 7: // CHECK_SUM
          return CHECK_SUM;
        case 8: // CONTENTS
          return CONTENTS;
        case 9: // BYTES_LENGTH
          return BYTES_LENGTH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POS_ISSET_ID = 0;
  private static final int __BYTESLENGTH_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RELATIVE_PATH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATIVE_PATH, new org.apache.thrift.meta_data.FieldMetaData("relativePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FileTypeEnum.class)));
    tmpMap.put(_Fields.IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("identifier", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POS, new org.apache.thrift.meta_data.FieldMetaData("pos", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHECK_SUM, new org.apache.thrift.meta_data.FieldMetaData("checkSum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENTS, new org.apache.thrift.meta_data.FieldMetaData("contents", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.BYTES_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("bytesLength", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileSegment.class, metaDataMap);
  }

  public FileSegment() {
    this.fileType = rpc.thrift.file.transfer.FileTypeEnum.FILE_TYPE;

    this.pos = 0L;

  }

  public FileSegment(
    java.lang.String fileName,
    FileTypeEnum fileType,
    java.lang.String identifier,
    long pos,
    java.lang.String checkSum,
    java.nio.ByteBuffer contents,
    int bytesLength)
  {
    this();
    this.fileName = fileName;
    this.fileType = fileType;
    this.identifier = identifier;
    this.pos = pos;
    setPosIsSet(true);
    this.checkSum = checkSum;
    this.contents = org.apache.thrift.TBaseHelper.copyBinary(contents);
    this.bytesLength = bytesLength;
    setBytesLengthIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileSegment(FileSegment other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    if (other.isSetRelativePath()) {
      this.relativePath = other.relativePath;
    }
    if (other.isSetFileType()) {
      this.fileType = other.fileType;
    }
    if (other.isSetIdentifier()) {
      this.identifier = other.identifier;
    }
    this.pos = other.pos;
    if (other.isSetCheckSum()) {
      this.checkSum = other.checkSum;
    }
    if (other.isSetContents()) {
      this.contents = org.apache.thrift.TBaseHelper.copyBinary(other.contents);
    }
    this.bytesLength = other.bytesLength;
  }

  public FileSegment deepCopy() {
    return new FileSegment(this);
  }

  @Override
  public void clear() {
    this.fileName = null;
    this.relativePath = null;
    this.fileType = rpc.thrift.file.transfer.FileTypeEnum.FILE_TYPE;

    this.identifier = null;
    this.pos = 0L;

    this.checkSum = null;
    this.contents = null;
    setBytesLengthIsSet(false);
    this.bytesLength = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFileName() {
    return this.fileName;
  }

  public FileSegment setFileName(@org.apache.thrift.annotation.Nullable java.lang.String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRelativePath() {
    return this.relativePath;
  }

  public FileSegment setRelativePath(@org.apache.thrift.annotation.Nullable java.lang.String relativePath) {
    this.relativePath = relativePath;
    return this;
  }

  public void unsetRelativePath() {
    this.relativePath = null;
  }

  /** Returns true if field relativePath is set (has been assigned a value) and false otherwise */
  public boolean isSetRelativePath() {
    return this.relativePath != null;
  }

  public void setRelativePathIsSet(boolean value) {
    if (!value) {
      this.relativePath = null;
    }
  }

  /**
   * 
   * @see FileTypeEnum
   */
  @org.apache.thrift.annotation.Nullable
  public FileTypeEnum getFileType() {
    return this.fileType;
  }

  /**
   * 
   * @see FileTypeEnum
   */
  public FileSegment setFileType(@org.apache.thrift.annotation.Nullable FileTypeEnum fileType) {
    this.fileType = fileType;
    return this;
  }

  public void unsetFileType() {
    this.fileType = null;
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return this.fileType != null;
  }

  public void setFileTypeIsSet(boolean value) {
    if (!value) {
      this.fileType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIdentifier() {
    return this.identifier;
  }

  public FileSegment setIdentifier(@org.apache.thrift.annotation.Nullable java.lang.String identifier) {
    this.identifier = identifier;
    return this;
  }

  public void unsetIdentifier() {
    this.identifier = null;
  }

  /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifier() {
    return this.identifier != null;
  }

  public void setIdentifierIsSet(boolean value) {
    if (!value) {
      this.identifier = null;
    }
  }

  public long getPos() {
    return this.pos;
  }

  public FileSegment setPos(long pos) {
    this.pos = pos;
    setPosIsSet(true);
    return this;
  }

  public void unsetPos() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POS_ISSET_ID);
  }

  /** Returns true if field pos is set (has been assigned a value) and false otherwise */
  public boolean isSetPos() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POS_ISSET_ID);
  }

  public void setPosIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCheckSum() {
    return this.checkSum;
  }

  public FileSegment setCheckSum(@org.apache.thrift.annotation.Nullable java.lang.String checkSum) {
    this.checkSum = checkSum;
    return this;
  }

  public void unsetCheckSum() {
    this.checkSum = null;
  }

  /** Returns true if field checkSum is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckSum() {
    return this.checkSum != null;
  }

  public void setCheckSumIsSet(boolean value) {
    if (!value) {
      this.checkSum = null;
    }
  }

  public byte[] getContents() {
    setContents(org.apache.thrift.TBaseHelper.rightSize(contents));
    return contents == null ? null : contents.array();
  }

  public java.nio.ByteBuffer bufferForContents() {
    return org.apache.thrift.TBaseHelper.copyBinary(contents);
  }

  public FileSegment setContents(byte[] contents) {
    this.contents = contents == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(contents.clone());
    return this;
  }

  public FileSegment setContents(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer contents) {
    this.contents = org.apache.thrift.TBaseHelper.copyBinary(contents);
    return this;
  }

  public void unsetContents() {
    this.contents = null;
  }

  /** Returns true if field contents is set (has been assigned a value) and false otherwise */
  public boolean isSetContents() {
    return this.contents != null;
  }

  public void setContentsIsSet(boolean value) {
    if (!value) {
      this.contents = null;
    }
  }

  public int getBytesLength() {
    return this.bytesLength;
  }

  public FileSegment setBytesLength(int bytesLength) {
    this.bytesLength = bytesLength;
    setBytesLengthIsSet(true);
    return this;
  }

  public void unsetBytesLength() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTESLENGTH_ISSET_ID);
  }

  /** Returns true if field bytesLength is set (has been assigned a value) and false otherwise */
  public boolean isSetBytesLength() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTESLENGTH_ISSET_ID);
  }

  public void setBytesLengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTESLENGTH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((java.lang.String)value);
      }
      break;

    case RELATIVE_PATH:
      if (value == null) {
        unsetRelativePath();
      } else {
        setRelativePath((java.lang.String)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((FileTypeEnum)value);
      }
      break;

    case IDENTIFIER:
      if (value == null) {
        unsetIdentifier();
      } else {
        setIdentifier((java.lang.String)value);
      }
      break;

    case POS:
      if (value == null) {
        unsetPos();
      } else {
        setPos((java.lang.Long)value);
      }
      break;

    case CHECK_SUM:
      if (value == null) {
        unsetCheckSum();
      } else {
        setCheckSum((java.lang.String)value);
      }
      break;

    case CONTENTS:
      if (value == null) {
        unsetContents();
      } else {
        if (value instanceof byte[]) {
          setContents((byte[])value);
        } else {
          setContents((java.nio.ByteBuffer)value);
        }
      }
      break;

    case BYTES_LENGTH:
      if (value == null) {
        unsetBytesLength();
      } else {
        setBytesLength((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_NAME:
      return getFileName();

    case RELATIVE_PATH:
      return getRelativePath();

    case FILE_TYPE:
      return getFileType();

    case IDENTIFIER:
      return getIdentifier();

    case POS:
      return getPos();

    case CHECK_SUM:
      return getCheckSum();

    case CONTENTS:
      return getContents();

    case BYTES_LENGTH:
      return getBytesLength();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILE_NAME:
      return isSetFileName();
    case RELATIVE_PATH:
      return isSetRelativePath();
    case FILE_TYPE:
      return isSetFileType();
    case IDENTIFIER:
      return isSetIdentifier();
    case POS:
      return isSetPos();
    case CHECK_SUM:
      return isSetCheckSum();
    case CONTENTS:
      return isSetContents();
    case BYTES_LENGTH:
      return isSetBytesLength();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof FileSegment)
      return this.equals((FileSegment)that);
    return false;
  }

  public boolean equals(FileSegment that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_relativePath = true && this.isSetRelativePath();
    boolean that_present_relativePath = true && that.isSetRelativePath();
    if (this_present_relativePath || that_present_relativePath) {
      if (!(this_present_relativePath && that_present_relativePath))
        return false;
      if (!this.relativePath.equals(that.relativePath))
        return false;
    }

    boolean this_present_fileType = true && this.isSetFileType();
    boolean that_present_fileType = true && that.isSetFileType();
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (!this.fileType.equals(that.fileType))
        return false;
    }

    boolean this_present_identifier = true && this.isSetIdentifier();
    boolean that_present_identifier = true && that.isSetIdentifier();
    if (this_present_identifier || that_present_identifier) {
      if (!(this_present_identifier && that_present_identifier))
        return false;
      if (!this.identifier.equals(that.identifier))
        return false;
    }

    boolean this_present_pos = true;
    boolean that_present_pos = true;
    if (this_present_pos || that_present_pos) {
      if (!(this_present_pos && that_present_pos))
        return false;
      if (this.pos != that.pos)
        return false;
    }

    boolean this_present_checkSum = true && this.isSetCheckSum();
    boolean that_present_checkSum = true && that.isSetCheckSum();
    if (this_present_checkSum || that_present_checkSum) {
      if (!(this_present_checkSum && that_present_checkSum))
        return false;
      if (!this.checkSum.equals(that.checkSum))
        return false;
    }

    boolean this_present_contents = true && this.isSetContents();
    boolean that_present_contents = true && that.isSetContents();
    if (this_present_contents || that_present_contents) {
      if (!(this_present_contents && that_present_contents))
        return false;
      if (!this.contents.equals(that.contents))
        return false;
    }

    boolean this_present_bytesLength = true;
    boolean that_present_bytesLength = true;
    if (this_present_bytesLength || that_present_bytesLength) {
      if (!(this_present_bytesLength && that_present_bytesLength))
        return false;
      if (this.bytesLength != that.bytesLength)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
    if (isSetFileName())
      hashCode = hashCode * 8191 + fileName.hashCode();

    hashCode = hashCode * 8191 + ((isSetRelativePath()) ? 131071 : 524287);
    if (isSetRelativePath())
      hashCode = hashCode * 8191 + relativePath.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileType()) ? 131071 : 524287);
    if (isSetFileType())
      hashCode = hashCode * 8191 + fileType.getValue();

    hashCode = hashCode * 8191 + ((isSetIdentifier()) ? 131071 : 524287);
    if (isSetIdentifier())
      hashCode = hashCode * 8191 + identifier.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pos);

    hashCode = hashCode * 8191 + ((isSetCheckSum()) ? 131071 : 524287);
    if (isSetCheckSum())
      hashCode = hashCode * 8191 + checkSum.hashCode();

    hashCode = hashCode * 8191 + ((isSetContents()) ? 131071 : 524287);
    if (isSetContents())
      hashCode = hashCode * 8191 + contents.hashCode();

    hashCode = hashCode * 8191 + bytesLength;

    return hashCode;
  }

  @Override
  public int compareTo(FileSegment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFileName(), other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRelativePath(), other.isSetRelativePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelativePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relativePath, other.relativePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileType(), other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIdentifier(), other.isSetIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifier, other.identifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPos(), other.isSetPos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pos, other.pos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCheckSum(), other.isSetCheckSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkSum, other.checkSum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContents(), other.isSetContents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contents, other.contents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBytesLength(), other.isSetBytesLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytesLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytesLength, other.bytesLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FileSegment(");
    boolean first = true;

    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (isSetRelativePath()) {
      if (!first) sb.append(", ");
      sb.append("relativePath:");
      if (this.relativePath == null) {
        sb.append("null");
      } else {
        sb.append(this.relativePath);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("fileType:");
    if (this.fileType == null) {
      sb.append("null");
    } else {
      sb.append(this.fileType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identifier:");
    if (this.identifier == null) {
      sb.append("null");
    } else {
      sb.append(this.identifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pos:");
    sb.append(this.pos);
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkSum:");
    if (this.checkSum == null) {
      sb.append("null");
    } else {
      sb.append(this.checkSum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contents:");
    if (this.contents == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.contents, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytesLength:");
    sb.append(this.bytesLength);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (fileName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileName' was not present! Struct: " + toString());
    }
    if (fileType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileType' was not present! Struct: " + toString());
    }
    if (identifier == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'identifier' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'pos' because it's a primitive and you chose the non-beans generator.
    if (checkSum == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'checkSum' was not present! Struct: " + toString());
    }
    if (contents == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contents' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'bytesLength' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileSegmentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FileSegmentStandardScheme getScheme() {
      return new FileSegmentStandardScheme();
    }
  }

  private static class FileSegmentStandardScheme extends org.apache.thrift.scheme.StandardScheme<FileSegment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileSegment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RELATIVE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relativePath = iprot.readString();
              struct.setRelativePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileType = rpc.thrift.file.transfer.FileTypeEnum.findByValue(iprot.readI32());
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifier = iprot.readString();
              struct.setIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pos = iprot.readI64();
              struct.setPosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHECK_SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkSum = iprot.readString();
              struct.setCheckSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONTENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contents = iprot.readBinary();
              struct.setContentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BYTES_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bytesLength = iprot.readI32();
              struct.setBytesLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPos()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pos' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBytesLength()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bytesLength' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileSegment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      if (struct.relativePath != null) {
        if (struct.isSetRelativePath()) {
          oprot.writeFieldBegin(RELATIVE_PATH_FIELD_DESC);
          oprot.writeString(struct.relativePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fileType != null) {
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.fileType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(struct.identifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POS_FIELD_DESC);
      oprot.writeI64(struct.pos);
      oprot.writeFieldEnd();
      if (struct.checkSum != null) {
        oprot.writeFieldBegin(CHECK_SUM_FIELD_DESC);
        oprot.writeString(struct.checkSum);
        oprot.writeFieldEnd();
      }
      if (struct.contents != null) {
        oprot.writeFieldBegin(CONTENTS_FIELD_DESC);
        oprot.writeBinary(struct.contents);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BYTES_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.bytesLength);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileSegmentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FileSegmentTupleScheme getScheme() {
      return new FileSegmentTupleScheme();
    }
  }

  private static class FileSegmentTupleScheme extends org.apache.thrift.scheme.TupleScheme<FileSegment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileSegment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.fileName);
      oprot.writeI32(struct.fileType.getValue());
      oprot.writeString(struct.identifier);
      oprot.writeI64(struct.pos);
      oprot.writeString(struct.checkSum);
      oprot.writeBinary(struct.contents);
      oprot.writeI32(struct.bytesLength);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRelativePath()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRelativePath()) {
        oprot.writeString(struct.relativePath);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileSegment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.fileName = iprot.readString();
      struct.setFileNameIsSet(true);
      struct.fileType = rpc.thrift.file.transfer.FileTypeEnum.findByValue(iprot.readI32());
      struct.setFileTypeIsSet(true);
      struct.identifier = iprot.readString();
      struct.setIdentifierIsSet(true);
      struct.pos = iprot.readI64();
      struct.setPosIsSet(true);
      struct.checkSum = iprot.readString();
      struct.setCheckSumIsSet(true);
      struct.contents = iprot.readBinary();
      struct.setContentsIsSet(true);
      struct.bytesLength = iprot.readI32();
      struct.setBytesLengthIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.relativePath = iprot.readString();
        struct.setRelativePathIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

