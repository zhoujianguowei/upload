/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rpc.thrift.file.transfer;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-04-25")
public class FileSegment implements org.apache.thrift.TBase<FileSegment, FileSegment._Fields>, java.io.Serializable, Cloneable, Comparable<FileSegment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileSegment");

  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("contents", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_NAME_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userNameList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FileSegmentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FileSegmentTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String fileName; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer contents; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> userNameList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_NAME((short)1, "fileName"),
    CONTENTS((short)2, "contents"),
    USER_NAME_LIST((short)3, "userNameList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_NAME
          return FILE_NAME;
        case 2: // CONTENTS
          return CONTENTS;
        case 3: // USER_NAME_LIST
          return USER_NAME_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.USER_NAME_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENTS, new org.apache.thrift.meta_data.FieldMetaData("contents", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.USER_NAME_LIST, new org.apache.thrift.meta_data.FieldMetaData("userNameList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileSegment.class, metaDataMap);
  }

  public FileSegment() {
  }

  public FileSegment(
    java.lang.String fileName,
    java.nio.ByteBuffer contents)
  {
    this();
    this.fileName = fileName;
    this.contents = org.apache.thrift.TBaseHelper.copyBinary(contents);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileSegment(FileSegment other) {
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    if (other.isSetContents()) {
      this.contents = org.apache.thrift.TBaseHelper.copyBinary(other.contents);
    }
    if (other.isSetUserNameList()) {
      java.util.List<java.lang.String> __this__userNameList = new java.util.ArrayList<java.lang.String>(other.userNameList);
      this.userNameList = __this__userNameList;
    }
  }

  public FileSegment deepCopy() {
    return new FileSegment(this);
  }

  @Override
  public void clear() {
    this.fileName = null;
    this.contents = null;
    this.userNameList = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFileName() {
    return this.fileName;
  }

  public FileSegment setFileName(@org.apache.thrift.annotation.Nullable java.lang.String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public byte[] getContents() {
    setContents(org.apache.thrift.TBaseHelper.rightSize(contents));
    return contents == null ? null : contents.array();
  }

  public java.nio.ByteBuffer bufferForContents() {
    return org.apache.thrift.TBaseHelper.copyBinary(contents);
  }

  public FileSegment setContents(byte[] contents) {
    this.contents = contents == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(contents.clone());
    return this;
  }

  public FileSegment setContents(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer contents) {
    this.contents = org.apache.thrift.TBaseHelper.copyBinary(contents);
    return this;
  }

  public void unsetContents() {
    this.contents = null;
  }

  /** Returns true if field contents is set (has been assigned a value) and false otherwise */
  public boolean isSetContents() {
    return this.contents != null;
  }

  public void setContentsIsSet(boolean value) {
    if (!value) {
      this.contents = null;
    }
  }

  public int getUserNameListSize() {
    return (this.userNameList == null) ? 0 : this.userNameList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getUserNameListIterator() {
    return (this.userNameList == null) ? null : this.userNameList.iterator();
  }

  public void addToUserNameList(java.lang.String elem) {
    if (this.userNameList == null) {
      this.userNameList = new java.util.ArrayList<java.lang.String>();
    }
    this.userNameList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getUserNameList() {
    return this.userNameList;
  }

  public FileSegment setUserNameList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> userNameList) {
    this.userNameList = userNameList;
    return this;
  }

  public void unsetUserNameList() {
    this.userNameList = null;
  }

  /** Returns true if field userNameList is set (has been assigned a value) and false otherwise */
  public boolean isSetUserNameList() {
    return this.userNameList != null;
  }

  public void setUserNameListIsSet(boolean value) {
    if (!value) {
      this.userNameList = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((java.lang.String)value);
      }
      break;

    case CONTENTS:
      if (value == null) {
        unsetContents();
      } else {
        if (value instanceof byte[]) {
          setContents((byte[])value);
        } else {
          setContents((java.nio.ByteBuffer)value);
        }
      }
      break;

    case USER_NAME_LIST:
      if (value == null) {
        unsetUserNameList();
      } else {
        setUserNameList((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_NAME:
      return getFileName();

    case CONTENTS:
      return getContents();

    case USER_NAME_LIST:
      return getUserNameList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILE_NAME:
      return isSetFileName();
    case CONTENTS:
      return isSetContents();
    case USER_NAME_LIST:
      return isSetUserNameList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof FileSegment)
      return this.equals((FileSegment)that);
    return false;
  }

  public boolean equals(FileSegment that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_contents = true && this.isSetContents();
    boolean that_present_contents = true && that.isSetContents();
    if (this_present_contents || that_present_contents) {
      if (!(this_present_contents && that_present_contents))
        return false;
      if (!this.contents.equals(that.contents))
        return false;
    }

    boolean this_present_userNameList = true && this.isSetUserNameList();
    boolean that_present_userNameList = true && that.isSetUserNameList();
    if (this_present_userNameList || that_present_userNameList) {
      if (!(this_present_userNameList && that_present_userNameList))
        return false;
      if (!this.userNameList.equals(that.userNameList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
    if (isSetFileName())
      hashCode = hashCode * 8191 + fileName.hashCode();

    hashCode = hashCode * 8191 + ((isSetContents()) ? 131071 : 524287);
    if (isSetContents())
      hashCode = hashCode * 8191 + contents.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserNameList()) ? 131071 : 524287);
    if (isSetUserNameList())
      hashCode = hashCode * 8191 + userNameList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FileSegment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFileName(), other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContents(), other.isSetContents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contents, other.contents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUserNameList(), other.isSetUserNameList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserNameList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userNameList, other.userNameList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FileSegment(");
    boolean first = true;

    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contents:");
    if (this.contents == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.contents, sb);
    }
    first = false;
    if (isSetUserNameList()) {
      if (!first) sb.append(", ");
      sb.append("userNameList:");
      if (this.userNameList == null) {
        sb.append("null");
      } else {
        sb.append(this.userNameList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (contents == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contents' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileSegmentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FileSegmentStandardScheme getScheme() {
      return new FileSegmentStandardScheme();
    }
  }

  private static class FileSegmentStandardScheme extends org.apache.thrift.scheme.StandardScheme<FileSegment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileSegment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contents = iprot.readBinary();
              struct.setContentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_NAME_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.userNameList = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.userNameList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setUserNameListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileSegment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      if (struct.contents != null) {
        oprot.writeFieldBegin(CONTENTS_FIELD_DESC);
        oprot.writeBinary(struct.contents);
        oprot.writeFieldEnd();
      }
      if (struct.userNameList != null) {
        if (struct.isSetUserNameList()) {
          oprot.writeFieldBegin(USER_NAME_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.userNameList.size()));
            for (java.lang.String _iter3 : struct.userNameList)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileSegmentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FileSegmentTupleScheme getScheme() {
      return new FileSegmentTupleScheme();
    }
  }

  private static class FileSegmentTupleScheme extends org.apache.thrift.scheme.TupleScheme<FileSegment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileSegment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeBinary(struct.contents);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFileName()) {
        optionals.set(0);
      }
      if (struct.isSetUserNameList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
      if (struct.isSetUserNameList()) {
        {
          oprot.writeI32(struct.userNameList.size());
          for (java.lang.String _iter4 : struct.userNameList)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileSegment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.contents = iprot.readBinary();
      struct.setContentsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.userNameList = new java.util.ArrayList<java.lang.String>(_list5.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.userNameList.add(_elem6);
          }
        }
        struct.setUserNameListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

